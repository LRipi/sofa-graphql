import {NexusGraphQLSchema} from "@nexus/schema/dist/definitions/_types";
import express from "express";
import expressConfig from './config';

import {OpenAPI, useSofa} from "sofa-api";
import path from "path";
import * as swaggerUi from "swagger-ui-express";
import swaggerDocument from "./swagger.json";
import {PrismaClient} from "@prisma/client/scripts/default-index";

/**
 * This function sets the REST endpoint.
 * It also generates the swagger files to provide documentation.
 * via swagger in json and YAML format.
 * @param schema Schema generated by GraphQL
 * @param db Client prisma to interact with the DB
 */
export default function (schema: NexusGraphQLSchema, db: PrismaClient) {
    const app = express()
    expressConfig(app);

    /**
     * Configuration for the documentation to be generated.
     */
    const openApi = OpenAPI({
        schema,
        info: {
            title: 'Example API',
            version: '3.0.3',
        },
        components: {
            securitySchemes: {
                bearerAuth: {
                    type: 'http',
                    scheme: 'bearer',
                    bearerFormat: 'JWT',
                },
            },
        },
        security: [
            {
                bearerAuth: [],
            },
        ],
    });

    /**
     * Creation of the endpoint with Sofa
     */
    app.use('/api', useSofa({
        schema,
        depthLimit: 2,
        method: {
            /**
             * He we declare the Mutation.publish to make it as PUT request
             * An idea would be to insert a Object to contains :
             *   - The other HTTP method (e.g. PUT, PATCH, DELETE)
             *   - The route to use (see graphql/Post/Mutation and graphql/Post/Query for more info in comments)
             *   - The parameters to set as path parameters (instead of body parameters)
             */

            /**
             * We actually have this ->
             */
            'Mutation.publishDraft': "PUT",
            'Mutation.updateDraft': 'PUT',
            'Mutation.deleteDraft': 'DELETE',
            'Mutation.createDraft': 'POST',
            'Query.drafts': 'GET',
            'Query.posts': 'GET',

            /**
             * What it could be nice to have ->
             */
            /*
            'Mutation.publishDraft': {
                method: 'PUT',
                path: '/drafts/:draftId/publish'
            },
            'Mutation.updateDraft': {
                method: 'PUT',
                path: '/drafts/:draftId'
            },
            'Mutation.deleteDraft': {
                method: 'DELETE',
                path: '/drafts/:draftId'
            },
            'Mutation.createDraft': {
                method: 'POST',
                path: '/drafts/:draftId'
            },
            'Query.drafts': {
                method: 'GET',
                path: '/drafts'
            },
            'Query.posts': {
                method: 'GET',
                path: '/drafts/published'
            },
            */
        },
        errorHandler(res, errors) {
            /**
             * Here we have regex to catch nexus errors and to send the
             * right HTTP error code.
             * Maybe an idea for a new feature ?
             */
            for (let i = 0; i < errors.length; ++i) {
                if (/.*not provided\.$/.test(errors[i].message))
                    res.status(422).json({
                        success: false,
                        message: 'Missing parameters.'
                    })
                else
                    res.status(500).json({
                        success: false,
                        message: "Internal server error"
                    });
            }
        },
        onRoute(info) {
            openApi.addRoute(info, {
                basePath: '/api',
            })
        },
        async context({req}) {
            return {
                req,
                db
            }
        }
    }))

    /**
     * Backup and deployment of the generated documentation.
     */
    openApi.save(path.join(__dirname, '/swagger.yml'));
    openApi.save(path.join(__dirname, '/swagger.json'));
    app.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

    app.listen(4001, () => console.log(`REST server is running on http://localhost:4001`));
}
